// <auto-generated />
using System;
using AccountService.Shared.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AccountService.Shared.Infrastructure.Migrations
{
    [DbContext(typeof(MainDbContext))]
    [Migration("20250813054755_AddAccrueInterestProcedure")]
    partial class AddAccrueInterestProcedure
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountService.Shared.Domain.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at_utc");

                    b.Property<DateTime?>("DeletedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at_utc");

                    b.Property<Guid>("EntityVersion")
                        .IsConcurrencyToken()
                        .HasColumnType("uuid")
                        .HasColumnName("entity_version");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false)
                        .HasColumnName("is_deleted");

                    b.Property<DateTime?>("UpdatedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at_utc");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("AccountService.Transactions.Domain.TransactionEntity", b =>
                {
                    b.HasBaseType("AccountService.Shared.Domain.BaseEntity");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("account_id");

                    b.Property<Guid?>("CounterpartyAccountId")
                        .HasColumnType("uuid")
                        .HasColumnName("counterparty_account_id");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("character varying(5000)")
                        .HasColumnName("description");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<decimal>("Sum")
                        .HasColumnType("numeric")
                        .HasColumnName("sum");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer")
                        .HasColumnName("transaction_type");

                    b.HasIndex("CreatedAtUtc")
                        .HasDatabaseName("IX_transactions_created_at_utc_gist");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("CreatedAtUtc"), "GIST");

                    b.HasIndex("AccountId", "CreatedAtUtc")
                        .HasDatabaseName("IX_transactions_account_id_and_created_at_utc");

                    b.ToTable("transactions", (string)null);
                });

            modelBuilder.Entity("AccountService.Wallets.Domain.WalletEntity", b =>
                {
                    b.HasBaseType("AccountService.Shared.Domain.BaseEntity");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric")
                        .HasColumnName("balance");

                    b.Property<DateTime?>("ClosedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("closed_at_utc");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasColumnName("currency");

                    b.Property<decimal?>("InterestRate")
                        .HasMaxLength(100)
                        .HasColumnType("numeric")
                        .HasColumnName("interest_rate");

                    b.Property<DateTime>("OpenedAtUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("opened_at_utc");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("IX_wallets_owner_id");

                    b.ToTable("wallets", (string)null);
                });

            modelBuilder.Entity("AccountService.Transactions.Domain.TransactionEntity", b =>
                {
                    b.HasOne("AccountService.Wallets.Domain.WalletEntity", null)
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ForeignKey_AccountId");
                });

            modelBuilder.Entity("AccountService.Wallets.Domain.WalletEntity", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
